#include <iostream>
#include <iomanip>

//=============================================================================================
//
//Задача: разработать на C++ программу, выполняющую умножение двух матриц.
//Из курса высшей математики известно, что произведение двух матриц имеет смысл только тогда,
//когда число столбцов матрицы А совпадает с числом строк матрицы В.
//
//=============================================================================================

using namespace std;

int main()
{

    int a, b, c, d;



    //*******************************
    //                              *
    // Ввод параметров матриц       *
    //                              *
    //*******************************

    do
    {
    system("clear");
    cout << "Введите размерность 1-й матрицы: > ";
    cin >> a >> b;

    cout << "Введите размерность 2-й матрицы: > ";
    cin >> c >> d;
    if(b != c)
    {
    system("clear");
    cout << "Невозможно умножить!!!";
    getchar();
    }
    }
    while(b != c);
    //****************************************************************************
    //
    // Далее выделяем память под два динамических двумерных массива -
    // соответственно матрицы А и В.
    //
    //
    //****************************************************************************

    int **Matrix_A = new int *[a];
    for (int i(0); i < a; i++)
        Matrix_A[i] = new int[b];



    int **Matrix_B = new int*[c];
    for(int i (0); i < c; i++)
        Matrix_B[i] = new int[d];



    //*************************************************************************************************
    //
    // Далее аналогично выделяем память под динамический двумерный массив C,
    // который и является произведением двух матриц.
    // В ней число строк равно числу строк матрицы А, а число столбцов равно числу столбцов матрицы В.
    //
    //*************************************************************************************************
    int **Matrix_C = new int*[a];
    for(int i(0); i < a; i++)
    {
       Matrix_C[i] = new int[d];
    }

    //************************************************************************************************
    //
    // Заполняем матрицы A и B пользовательскими данными
    //
    //
    //*************************************************************************************************
    cout << "Заполните 1-ю матрицу " << a << " x " << b << ":\n";

    for(int i(0); i < a; i++) {
        for(int j(0); j < b; j++) {
            cin >> Matrix_A[i][j];
        }
    }

    cout << "Заполните 2-ю матрицу " << c << " x " << d << ":\n";

    for(int i(0); i < c; i++) {
        for(int j(0); j < d; j++) {
            cin >> Matrix_B[i][j];
        }
    }


    //*************************************************************************************************
    //
    // Обнуляем третью матрицу Matrix_C
    //
    //
    //*************************************************************************************************
    for(int i(0); i < a; i++) {
        for(int j(0); j < d; j++) {
            Matrix_C[i][j] = 0;
        }
    }

    //************************************************************************************************
    //
    // Решение
    //
    //************************************************************************************************
    for(int i(0); i < a; i++) {
        for(int j(0); j < d; j++) {
            for(int m(0); m < b; m++) {
                Matrix_C[i][j] += Matrix_A[i][m] * Matrix_B[m][j];
            }
        }
    }


    cout << endl << endl;


    //*********************************************************************************************
    //
    // Вывод результата
    //
    //
    //*********************************************************************************************



    for(int i(0); i < a; i++) {
        for(int j(0); j < d; j++) {
            cout << Matrix_C[i][j] << " ";
        }
        cout << endl;
    }


    //*********************************************************************************************
    // Очистка кучи
    //
    //*********************************************************************************************
    for(int i(0); i < a; i++) {
        delete [] Matrix_A[i];
    }
    delete [] Matrix_A;

    for(int i(0); i < c; i++) {
        delete [] Matrix_B[i];
    }
    delete [] Matrix_B;

    for(int i(0); i < a; i++) {
        delete [] Matrix_C[i];
    }
    delete [] Matrix_C;



    return 0;
}

